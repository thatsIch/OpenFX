// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the idea plugin to add support for IntelliJ IDEA
apply plugin: 'idea'

/* We use Java 1.8 */
sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()

    // for objectDB you need additional maven
    maven {
        url "http://m2.objectdb.com"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "org.encog:encog-core:3.2.0"
    compile "com.google.inject:guice:3.0"
    compile "com.google.inject.extensions:guice-assistedinject:3.0"
    compile "com.cathive.fx:fx-guice:2.1.3"

    // include all local libs, here OpenCV since no Maven support yet, else use JavaCV
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "org.jukito:jukito:1.4"
}

sourceSets {
    main.java.srcDir 'src/main/java'
    test.java.srcDir 'src/test/java'

    main.resources.srcDir 'src/main/resources'
    test.resources.srcDir 'src/test/resources'
}

idea {
    workspace.iws.withXml { provider ->
        // Default application run configuration
        def applicationDefaults = provider.node.component.find { it.@name == 'RunManager'}.configuration.find { it.@type == 'Application'}
        if (applicationDefaults != null) {
            applicationDefaults.module.@name = 'BachelorOpenCV'

            applicationDefaults.option.find { it.@name == 'MAIN_CLASS_NAME'}.@value = 'Main'
            applicationDefaults.option.find { it.@name == 'VM_PARAMETERS'}.@value = '-Djava.library.path="$MODULE_DIR$/dll"'
            applicationDefaults.option.find { it.@name == 'WORKING_DIRECTORY'}.@value = 'file://$MODULE_DIR$'
        }

        // default junit run configuration
        def jUnitDefaults = provider.node.component.find { it.@name == 'RunManager'}.configuration.find { it.@type == 'JUnit'}
        if (jUnitDefaults != null) {
            jUnitDefaults.module.@name = 'BachelorOpenCV'

            jUnitDefaults.option.find { it.@name == 'PACKAGE_NAME'}.@value = 'de.thatsich.bachelor'
            jUnitDefaults.option.find { it.@name == 'TEST_OBJECT'}.@value = 'package'
            jUnitDefaults.option.find { it.@name == 'VM_PARAMETERS'}.@value = '-ea -Djava.library.path="$MODULE_DIR$/dll"'
            jUnitDefaults.option.find { it.@name == 'WORKING_DIRECTORY'}.@value = 'file://$MODULE_DIR$'
        }

        // actual app run configuration
        def application = provider.node.component.find { it.@name == 'RunManager'}.configuration.find { it.@type == 'Application' && it.@name == 'OpenFX'}
        if (application == null) {
            def clonedNode = new XmlParser().parseText( XmlUtil.serialize(applicationDefaults))
            clondeNode.@name = 'OpenFX'
            provider.node.component.find { it.@name == 'RunManager'}.append(clonedNode)
        }
    }

    module {
        //and some extra dirs that should be excluded by IDEA
        excludeDirs += file('.gradle')
        excludeDirs += file('.idea')

        //if you prefer different output folders
        outputDir = file('.idea/build/main')
        testOutputDir = file('.idea/build/test')

        //if you love browsing Javadoc
        downloadJavadoc = true

        //and love reading sources :)
        downloadSources = true
    }
}