buildscript {
    repositories{
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.github.rodionmoiseev.gradle.plugins', name: 'idea-utils', version: '0.3-rc4'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the idea plugin to add support for IntelliJ IDEA
apply plugin: 'idea'

apply plugin: 'idea-utils'

/* We use Java 1.8 */
sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // use local maven first
    mavenLocal()
    // use jcenter first since it is faster and _should_ have all stuff Maven also has
    jcenter()
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
//    compile 'com.airhacks:afterburner.fx:1.6.3'
    compile "org.encog:encog-core:3.3.0"
    compile "com.google.inject:guice:4.0"
    compile "com.google.inject.extensions:guice-assistedinject:4.0"
    compile "com.cathive.fx:fx-guice:8.0.0"

    // include all local libs, here OpenCV since no Maven support yet, else use JavaCV
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.jukito:jukito:1.4.1"
    testCompile 'org.assertj:assertj-core:3.3.0'
}

sourceSets {
    main.java.srcDir 'src/main/java'
    test.java.srcDir 'src/test/java'

    main.resources.srcDir 'src/main/resources'
    test.resources.srcDir 'src/test/resources'
}

idea {
    project {
        vcs {
            vcs = 'Git'
        }

        runConfigurations {
            main {
                type = 'Application'
                name = "Run it"
                mainClass = 'de.thatsich.openfx.OpenFX'
                vmOptions = '-Djava.library.path="$MODULE_DIR$/dll"'
                isDefault = true
            }

//            test {
//                type = 'JUnit'
//                name = "Test it"
//                vmOptions = '-Djava.library.path="$MODULE_DIR$/dll"'
//            }
        }
    }

//    workspace.iws.withXml { provider ->
//        // Default application run configuration
//        def applicationDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find {
//            it.@type == 'Application'
//        }
//        if (applicationDefaults != null) {
//            applicationDefaults.module.@name = 'BachelorOpenCV'
//
//            applicationDefaults.option.find { it.@name == 'MAIN_CLASS_NAME' }.@value = 'Main'
//            applicationDefaults.option.find {
//                it.@name == 'VM_PARAMETERS'
//            }.@value = '-Djava.library.path="$MODULE_DIR$/dll"'
//            applicationDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = 'file://$MODULE_DIR$'
//        }
//
//        // default junit run configuration
//        def jUnitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find {
//            it.@type == 'JUnit'
//        }
//        if (jUnitDefaults != null) {
//            jUnitDefaults.module.@name = 'BachelorOpenCV'
//
//            jUnitDefaults.option.find { it.@name == 'PACKAGE_NAME' }.@value = 'de.thatsich.openfx'
//            jUnitDefaults.option.find { it.@name == 'TEST_OBJECT' }.@value = 'package'
//            jUnitDefaults.option.find {
//                it.@name == 'VM_PARAMETERS'
//            }.@value = '-ea -Djava.library.path="$MODULE_DIR$/dll"'
//            jUnitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = 'file://$MODULE_DIR$'
//        }
//
//        // actual app run configuration
//        def application = provider.node.component.find { it.@name == 'RunManager' }.configuration.find {
//            it.@type == 'Application' && it.@name == 'OpenFX'
//        }
//        if (application == null) {
//            def clonedNode = new XmlParser().parseText(XmlUtil.serialize(applicationDefaults))
//            clondeNode.@name = 'OpenFX'
//            provider.node.component.find { it.@name == 'RunManager' }.append(clonedNode)
//        }
//    }

    module {
        //and some extra dirs that should be excluded by IDEA
        excludeDirs += file('.gradle')
        excludeDirs += file('.idea')

        //if you love browsing Javadoc
        downloadJavadoc = true

        //and love reading sources :)
        downloadSources = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

tasks.withType(Test) {
    systemProperty "java.library.path", "dll"
}